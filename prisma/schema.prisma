generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String    
  name         String
  wallet       Wallet?  
  role         Role          @default(USER)
  payments     Payment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Wallet {
  id              Int           @id @default(autoincrement())
  address         String        @unique
  publicKey       String
  privateKey      String
  seed            String
  user            User          @relation(fields: [userId], references: [id])
  userId          Int           @unique
  trustLines      TrustLine[]
  escrowsSender   IOUEscrow[]   @relation("EscrowSender")
  escrowsReceived IOUEscrow[]   @relation("EscrowReceiver")
  exchangeLogs    ExchangeLog[]  
  outboxes        Outbox[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model TrustLine {
  id           Int       @id @default(autoincrement())
  currency     String
  issuer       String   
  limit        String     
  wallet       Wallet    @relation(fields: [walletId], references: [id])
  walletId     Int
  address      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([address, currency, issuer])
}

model Payment {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  orderId    String    @unique
  paymentKey String?   @unique
  amount     Int
  currency   String
  status     PaymentStatus   
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model IOUEscrow {
  id               Int        @id @default(autoincrement())
  escrowId         String     @unique
  offerSequence    Int?    
  senderWallet     Wallet     @relation("EscrowSender", fields: [senderWalletId], references: [id])   
  senderWalletId   Int
  senderAddress    String
  receiverWallet   Wallet     @relation("EscrowReceiver", fields: [receiverWalletId], references: [id])
  receiverWalletId Int
  receiverAddress  String
  amount           Int
  currency         String
  status           EscrowStatus
  finishAfter      DateTime
  cancelAfter      DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model ExchangeLog {
  id          Int        @id @default(autoincrement())
  wallet      Wallet?    @relation(fields: [walletId], references: [id])
  walletId    Int?
  address     String
  txHash      String   
  currency    String  
  issuer      String   
  delta       Float    
  createdAt   DateTime   @default(now())

  @@unique([txHash, address, currency, issuer])
}

model Outbox {
  id         Int           @id @default(autoincrement())
  type       String
  payload    Json    
  wallet     Wallet?       @relation(fields: [walletId], references: [id])
  walletId   Int?
  address    String
  status     OutboxStatus  @default(PENDING)
  retryCount Int           @default(0)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

enum OutboxStatus {
  PENDING
  SUCCESS
  FAILED
}

enum EscrowStatus {
  PENDING
  FINISHED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

enum Role {
  USER
  ADMIN
}